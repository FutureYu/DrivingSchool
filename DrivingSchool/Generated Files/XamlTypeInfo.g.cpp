//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#include "pch.h"
#include "XamlTypeInfo.g.h"

#include "AddTeacherThree.xaml.h"
#include "AddTeacherTwo.xaml.h"
#include "AdminPage.xaml.h"
#include "ChangePwd.xaml.h"
#include "CheckScore.xaml.h"
#include "MarkTeacher.xaml.h"
#include "App.xaml.h"
#include "MainPage.xaml.h"
#include "Register.xaml.h"
#include "ReserveExam.xaml.h"
#include "ReserveTeacher.xaml.h"
#include "StudentPage.xaml.h"
#include "TeacherDetail.xaml.h"
#include "TeacherPage.xaml.h"
#include "UplodeScore.xaml.h"
#include "ViewMark.xaml.h"
#include "ViewStudents.xaml.h"
#include "XamlBindingInfo.g.hpp"
#include "AddTeacherThree.g.hpp"
#include "AddTeacherTwo.g.hpp"
#include "AdminPage.g.hpp"
#include "ChangePwd.g.hpp"
#include "CheckScore.g.hpp"
#include "MarkTeacher.g.hpp"
#include "App.g.hpp"
#include "MainPage.g.hpp"
#include "Register.g.hpp"
#include "ReserveExam.g.hpp"
#include "ReserveTeacher.g.hpp"
#include "StudentPage.g.hpp"
#include "TeacherDetail.g.hpp"
#include "TeacherPage.g.hpp"
#include "UplodeScore.g.hpp"
#include "ViewMark.g.hpp"
#include "ViewStudents.g.hpp"

template<typename T>
::Platform::Object^ ActivateType()
{
    return ref new T;
}

template<typename TInstance, typename TItem>
void CollectionAdd(::Platform::Object^ instance, ::Platform::Object^ item)
{
    safe_cast<TInstance^>(instance)->Append((TItem)item);
}

template<typename TInstance, typename TKey, typename TItem>
void DictionaryAdd(::Platform::Object^ instance, ::Platform::Object^ key, ::Platform::Object^ item)
{
    safe_cast<TInstance^>(instance)->Insert((TKey)key, (TItem)item);
}

template<typename T>
::Platform::Object^ FromStringConverter(::XamlTypeInfo::InfoProvider::XamlUserType^ userType, ::Platform::String^ input)
{
    return ref new ::Platform::Box<T>((T)userType->CreateEnumUIntFromString(input));
}

struct TypeInfo
{
    PCWSTR  typeName;
    PCWSTR contentPropertyName;
    ::Platform::Object^ (*activator)();
    void (*collectionAdd)(::Platform::Object^, ::Platform::Object^);
    void (*dictionaryAdd)(::Platform::Object^, ::Platform::Object^, ::Platform::Object^);
    ::Platform::Object^ (*fromStringConverter)(::XamlTypeInfo::InfoProvider::XamlUserType^, ::Platform::String^);
    int     baseTypeIndex;
    int     firstMemberIndex;
    int     firstEnumValueIndex;
    ::Windows::UI::Xaml::Interop::TypeKind kindofType;
    bool    isLocalType;
    bool    isSystemType;
    bool    isReturnTypeStub;
    bool    isBindable;
};

TypeInfo TypeInfos[] = 
{
    //   0
    L"DrivingSchool.MainPage", L"",
    &ActivateType<::DrivingSchool::MainPage>, nullptr, nullptr, nullptr,
    16, // Windows.UI.Xaml.Controls.Page
    0, 0, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, false,
    //   1
    L"DrivingSchool.Register", L"",
    &ActivateType<::DrivingSchool::Register>, nullptr, nullptr, nullptr,
    16, // Windows.UI.Xaml.Controls.Page
    0, 0, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, false,
    //   2
    L"DrivingSchool.ViewMark", L"",
    &ActivateType<::DrivingSchool::ViewMark>, nullptr, nullptr, nullptr,
    16, // Windows.UI.Xaml.Controls.Page
    0, 0, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, false,
    //   3
    L"DrivingSchool.AdminPage", L"",
    &ActivateType<::DrivingSchool::AdminPage>, nullptr, nullptr, nullptr,
    16, // Windows.UI.Xaml.Controls.Page
    0, 0, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, false,
    //   4
    L"DrivingSchool.ChangePwd", L"",
    &ActivateType<::DrivingSchool::ChangePwd>, nullptr, nullptr, nullptr,
    16, // Windows.UI.Xaml.Controls.Page
    0, 0, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, false,
    //   5
    L"DrivingSchool.CheckScore", L"",
    &ActivateType<::DrivingSchool::CheckScore>, nullptr, nullptr, nullptr,
    16, // Windows.UI.Xaml.Controls.Page
    0, 0, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, false,
    //   6
    L"DrivingSchool.MarkTeacher", L"",
    &ActivateType<::DrivingSchool::MarkTeacher>, nullptr, nullptr, nullptr,
    16, // Windows.UI.Xaml.Controls.Page
    0, 0, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, false,
    //   7
    L"DrivingSchool.ReserveExam", L"",
    &ActivateType<::DrivingSchool::ReserveExam>, nullptr, nullptr, nullptr,
    16, // Windows.UI.Xaml.Controls.Page
    0, 0, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, false,
    //   8
    L"DrivingSchool.StudentPage", L"",
    &ActivateType<::DrivingSchool::StudentPage>, nullptr, nullptr, nullptr,
    16, // Windows.UI.Xaml.Controls.Page
    0, 0, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, false,
    //   9
    L"DrivingSchool.TeacherPage", L"",
    &ActivateType<::DrivingSchool::TeacherPage>, nullptr, nullptr, nullptr,
    16, // Windows.UI.Xaml.Controls.Page
    0, 0, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, false,
    //  10
    L"DrivingSchool.UplodeScore", L"",
    &ActivateType<::DrivingSchool::UplodeScore>, nullptr, nullptr, nullptr,
    16, // Windows.UI.Xaml.Controls.Page
    0, 0, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, false,
    //  11
    L"DrivingSchool.ViewStudents", L"",
    &ActivateType<::DrivingSchool::ViewStudents>, nullptr, nullptr, nullptr,
    16, // Windows.UI.Xaml.Controls.Page
    0, 0, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, false,
    //  12
    L"DrivingSchool.AddTeacherTwo", L"",
    &ActivateType<::DrivingSchool::AddTeacherTwo>, nullptr, nullptr, nullptr,
    16, // Windows.UI.Xaml.Controls.Page
    0, 0, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, false,
    //  13
    L"DrivingSchool.TeacherDetail", L"",
    &ActivateType<::DrivingSchool::TeacherDetail>, nullptr, nullptr, nullptr,
    16, // Windows.UI.Xaml.Controls.Page
    0, 0, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, false,
    //  14
    L"DrivingSchool.ReserveTeacher", L"",
    &ActivateType<::DrivingSchool::ReserveTeacher>, nullptr, nullptr, nullptr,
    16, // Windows.UI.Xaml.Controls.Page
    0, 0, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, false,
    //  15
    L"DrivingSchool.AddTeacherThree", L"",
    &ActivateType<::DrivingSchool::AddTeacherThree>, nullptr, nullptr, nullptr,
    16, // Windows.UI.Xaml.Controls.Page
    0, 0, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, false,
    //  16
    L"Windows.UI.Xaml.Controls.Page", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    0, 0, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    false, true,  false, false,
    //  17
    L"Windows.UI.Xaml.Controls.UserControl", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    0, 0, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    false, true,  false, false,
    //  Last type here is for padding
    L"", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1, 
    0, 0,::Windows::UI::Xaml::Interop::TypeKind::Custom,
    false, false, false, false,
};

UINT TypeInfoLookup[] = { 
      0,   //   0
      0,   //   1
      0,   //   2
      0,   //   3
      0,   //   4
      0,   //   5
      0,   //   6
      0,   //   7
      0,   //   8
      0,   //   9
      0,   //  10
      0,   //  11
      0,   //  12
      0,   //  13
      0,   //  14
      0,   //  15
      0,   //  16
      0,   //  17
      0,   //  18
      0,   //  19
      0,   //  20
      0,   //  21
      0,   //  22
      3,   //  23
      5,   //  24
      6,   //  25
     11,   //  26
     12,   //  27
     14,   //  28
     15,   //  29
     17,   //  30
     17,   //  31
     17,   //  32
     17,   //  33
     17,   //  34
     17,   //  35
     17,   //  36
     18,   //  37
};

TypeInfo* GetTypeInfo(::Platform::String^ typeName)
{
    int typeNameLength = typeName->Length();
    if (typeNameLength < _countof(TypeInfoLookup) - 1)
    {
        for (UINT i = TypeInfoLookup[typeNameLength]; i < TypeInfoLookup[typeNameLength+1]; i++)
        {
            if (typeName == ::Platform::StringReference(TypeInfos[i].typeName))
            {
                return &TypeInfos[i];
            }
        }
    }
    return nullptr;
}

::Platform::Collections::Vector<::Windows::UI::Xaml::Markup::IXamlMetadataProvider^>^ ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::OtherProviders::get()
{
    if(_otherProviders == nullptr)
    {
        auto otherProviders = ref new ::Platform::Collections::Vector<::Windows::UI::Xaml::Markup::IXamlMetadataProvider^>();
        _otherProviders = otherProviders;
    }
    return _otherProviders;
}

::Windows::UI::Xaml::Markup::IXamlType^ ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::CreateXamlType(::Platform::String^ typeName)
{
    TypeInfo* pTypeInfo = GetTypeInfo(typeName);
    TypeInfo* pNextTypeInfo = pTypeInfo + 1;
    if (pTypeInfo == nullptr || pNextTypeInfo == nullptr)
    {
        return nullptr;
    }
    else if (pTypeInfo->isSystemType)
    {
        return ref new ::XamlTypeInfo::InfoProvider::XamlSystemBaseType(typeName);
    }
    else
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(
            this, 
            ::Platform::StringReference(pTypeInfo->typeName), 
            this->GetXamlTypeByName(::Platform::StringReference(pTypeInfo->baseTypeIndex >= 0 ? TypeInfos[pTypeInfo->baseTypeIndex].typeName : L"")));
        userType->KindOfType = pTypeInfo->kindofType;
        userType->Activator = pTypeInfo->activator;
        userType->CollectionAdd = pTypeInfo->collectionAdd;
        userType->DictionaryAdd = pTypeInfo->dictionaryAdd;
        userType->FromStringConverter = pTypeInfo->fromStringConverter;
        userType->ContentPropertyName = ::Platform::StringReference(pTypeInfo->contentPropertyName);
        userType->IsLocalType = pTypeInfo->isLocalType;
        userType->IsReturnTypeStub = pTypeInfo->isReturnTypeStub;
        userType->IsBindable = pTypeInfo->isBindable;
        return userType;
    }
}

::Windows::UI::Xaml::Markup::IXamlMember^ ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::CreateXamlMember(::Platform::String^ longMemberName)
{
    ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = nullptr;
    // No Local Properties
    (void)longMemberName; // Unused parameter
    return xamlMember;
}

